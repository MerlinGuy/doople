package org.geof.dpl.request;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.io.FileUtils;
import org.geof.dpl.DomainData;
import org.geof.dpl.GeofInstaller;
import org.geof.dpl.ImageEditor;
import org.geof.dpl.ImageFile;
import org.geof.dpl.NewDomain;
import org.geof.dpl.ReturnObj;
import org.geof.dpl.VirshClone;
import org.geof.dpl.mgr.VmManager;
import org.geof.log.Logger;
import org.geof.request.DBRequest;
import org.geof.util.JsonUtil;
import org.json.JSONArray;
import org.json.JSONObject;
import org.libvirt.Domain;


public class VmRequest extends DBRequest {
	
	public final static int RUNNING = 1;
    public final static int OFFLINE = 5;
	public final static int FROM = 0;
    public final static int TO = 1;


@Override	
	public boolean process() {
		if (_actionKey.equalsIgnoreCase(READ)) {
			return read();
		}
		else if (_actionKey.equalsIgnoreCase(UPDATE)) {
			return update();
		}
		else if (_actionKey.equalsIgnoreCase(CREATE)) {
			return create();
		}
		else if (_actionKey.equalsIgnoreCase(DELETE)) {
			return delete();
		}
		else {
			return super.process();
		}
	}

//----------------------------
public boolean create( ) {

	VirshClone vc = null;
    GeofInstaller giHostImg =  null;
    GeofInstaller giGuest = null;
    
//    JSONObject vargs, JSONObject dpl_cfg, JSONObject chg_cfg

	try {
//	    String user = vargs.optString("-user",null);
//	    String pwd = vargs.optString("-pwd",null);
//        if (user == null) {
//        	return return setError("Missing -user parameter");
//        }
//        if (pwd == null) {
//        	return return setError("Missing -pwd parameter");
//        }

        boolean start = _data.optBoolean("-start",false);
//        String qemu_svr = vargs.optString("-qemu_svr",null);
//	    boolean is_remote_host = qemu_svr != null;
//	    boolean connect = vargs.optBoolean("-connect", is_remote_host);
	    boolean shutdown = _data.optBoolean("-shut",false);

    	String wdir = dpl_cfg.optString("workingdir","./");
    	
	    String mac_cfg_path = wdir + "mac.cfg";
	    JSONObject mac_addrs= null;
	    if ((new File(mac_cfg_path)).exists()) {
	        try {
	            mac_addrs = JsonUtil.getJObject(mac_cfg_path, null,null);
	        } catch (Exception e) {
	        	return setError("Malformed mac / ip file - " + mac_cfg_path);
	        }
	    } else {
	    	return setError("Missing mac / ip file - " + mac_cfg_path);
	    }
	    boolean restart = false;          
	    
	    String ip = _data.optString ("-ip", null);
	    if (! mac_addrs.has(ip) ){
	    	return setError("Mac address tail .get(" + ip + ") not in range 200:209");
	    }
	    
	    ReturnObj ro;
	    if (_data.optBoolean("-build", false)) {
	        String build_dir = dpl_cfg.optString("build_dir",null);
	        String ant_build = dpl_cfg.optString("ant_build",null);
	        if (build_dir != null) {
	            String ant_cmd = dpl_cfg.optString("ant_cmd", "svr_create_tar");
	            String local_dir = dpl_cfg.optString("local_dir","");
	            String cmd = " ant -buildfile " + ant_build 
	            		+ " -Darg0=" + build_dir
	            		+ " -Darg1=" + user 
	            		+ " -Darg2=" + pwd 
	            		+ " -Darg3=" + local_dir
	            		+ " " + ant_cmd;
	            
	            Logger.debug(cmd);
	            ro = exec(cmd);
	            if (ro.exit_code != 0) {
	            	return setError("Error- Ant build failed " + ro.error);
	            }
	        } else {
	        	return setError("build_dir"  + " is missing from dopple.cfg file");
	        }
	    }
	    
	    //TODO: change this to something like software install file
	    String install_file = _datA.optString("-install_file",null);vargs
	    if (install_file != null) {
	    	install_file = wdir + install_file;
	        if (! (new File(install_file)).exists()) {
	        	return setError("Missing install file - " + install_file);
	        }

	        start = true;
	        connect = true;
	                
	    } else if ( connect ) {
	        start = true;
	    }
	    
	    String libvirt_conn = "qemu://system";
//	    if (is_remote_host) {
//	    	libvirt_conn = vargs.optString("-qemu","qemu+tls") + "://" + qemu_svr + "/system"; 
//	    }		    
	    
	    // Connect to the Host server
	    Logger.debug("Connecting to virsh server");
	    vc = new VirshClone();
	    boolean vc_connected = vc.open(libvirt_conn);
	    if ( ! vc_connected ){
	    	return setError("Could not connect to host server");
	    }
	    Logger.debug("... connected server");

	    // Get the 'from' domain information (image files, xml, etc)
	    String from_domain = _data.optString("-from",null);		    
	    //TODO: write return object for calls like this
	    DomainData dData = vc.get_image_info(from_domain);
	    if (dData.error != null) {
	    	return setError(dData.error);
	    }
	    
	    // Shutdown the donor domain if necessary
	    if (vc.get_domain_state(from_domain) == RUNNING) {
	        Logger.debug("Shutting down source domain - " + from_domain);
	        if (shutdown) {
	            restart = vc.shutdown(from_domain);
	            if (! restart) {
	                Logger.debug("Error: could ! shutdown source domain -" + from_domain);
	            }
	        } else {
	        	return setError("Error: source domain == active - " + from_domain);
	        }
	    }		    
	    
	    boolean rtn = false;
//	    if (is_remote_host){
//	        Logger.debug("Attempting to connect to remote host");
//	        int max_retries = 12;
//	        giHostImg = new GeofInstaller( qemu_svr, user, pwd, max_retries );		        
//	        if (! giHostImg.connect().success ) {
//	        	return return setError("Connection to remote host timed out");
//	        }
//	        Logger.debug("... connected to remote host");
//	    }
	        
	    String host_image_dir = dpl_cfg.optString("host_image_dir","");
	    String new_domain = _data.optString("-domain_name");    
	    
	    Domain domExisting = vc.get_domain(new_domain);
	    if ( domExisting != null ) {
	    	Logger.debug("New domain exists on host: " + new_domain);
	        if (_data.optBoolean("-remove",false) ) {
	        	Logger.debug("Removing existing domain");
	        	DomainData eData = vc.get_image_info(new_domain);
	            if (! delete_domain(new_domain, qemu_svr, user, pwd, eData.getDomainDirectory())) {
	                Logger.debug("Error. Failed to remove existing new domain - " + new_domain);
	            }
	        	Logger.debug("... domain removed");
	        } else {
	        	return setError("Error. Domain: .get(" + new_domain + ") already exists");
	        }
	    }
	         
	    String work_dir = dpl_cfg.optString("work_dir","/tmp");
	    List<String> local_images = JsonUtil.toList(_data.optJSONArray("-local_images"));
	    
	    NewDomain nDomain = new NewDomain(new_domain, host_image_dir, work_dir);
	    
	    if (! nDomain.setImages(dData, local_images)) {
	    	return setError(nDomain.error); 
	    }
	    
	    String domainDir = nDomain.host_domain_dir;

	    Logger.debug("Creating image directory - " + domainDir);
	    String err = null;
	    if (giHostImg != null) {
	    	giHostImg.create_directory(domainDir);
	    } else {
	    	err = vc.makeTargetDir(domainDir);		    
	    }
	    
	    if (err != null) {
	    	return setError(err);
	    	return false;
	    }
	    Logger.debug("... image directory created.");

	    String mac_address = mac_addrs.optString(ip);		    
	    String new_xml = nDomain.getImageXml(dData.xml_str, mac_address);
	    if (new_xml == null) {
	    	return setError(nDomain.error);
	    }
	    
	    String new_xml_path = nDomain.xml_path;
	    Logger.debug("Creating image xml config file - " + new_xml_path);
	    rtn = false;

	    if (giHostImg != null) {
	    	String tmp_path =  work_dir + "/" + new_domain + ".xml";
	    	rtn = vc.write_new_xml(tmp_path, new_xml);
	    	rtn = giHostImg.scp_to(tmp_path , new_xml_path).success;
	    } else {
	    	rtn = vc.write_new_xml(new_xml_path, new_xml);
	    }
	    if (! rtn) {
	    	return setError("Unknown error while creating new domain xml file");
	    }

	    List<String> work_images = new ArrayList<String>();
	    for (ImageFile imgF : nDomain.imgFiles) {
	        Logger.debug("Copying image files - " + imgF.from_image);
	        if (giHostImg != null) {
	        	if (nDomain.useLocalFiles) {
		        	File fileFrom = new File(imgF.from_image);
		        	File fileHost = new File( imgF.work_image);
			        FileUtils.copyFile(fileFrom, fileHost);
	        	}else {
		        	ro = giHostImg.scp_from(imgF.from_image, imgF.work_image);
	        	}
	        	work_images.add(imgF.work_image);
	        } else {
	        	File fileFrom = new File(imgF.from_image);
	        	File fileHost = new File( imgF.host_image);
		        FileUtils.copyFile(fileFrom, fileHost);
	        	work_images.add(imgF.host_image);
	        }
	    }
	        
	    // Restart the shutdown source domain
	    if (restart) {
	        if (! vc.start(from_domain)) {
	            Logger.debug("Failed to restart from  domain - " + from_domain);
	        }
	    }

	    ip = dpl_cfg.optString("baseip","192.168.1.") + ip;
	    _data.put("-ip", ip);
	    
	    JSONObject mod_cfg = new JSONObject(
	    		"{'template_dir':'" + dpl_cfg.optString("template_dir") + "'}"
	    	);
	    mod_cfg.put("imgfiles",work_images);
	    
	    Logger.debug("Modifying files in new image");
	    ImageEditor imgEditor = new ImageEditor();
	    HashMap<String,String> rtn_mod = imgEditor.modify(mod_cfg, chg_cfg, vargs);
	    
	    if (rtn_mod.containsKey("error")){
	    	return setError("GuestFileModifier.modify : " + rtn_mod.get("error"));
	    }
	    Logger.debug("... modifications complete on new image");
	    
	    // The copied images files were editted locally so they need to be 
	    // scp'd to the host image directory
	    if (giHostImg != null) {
		    Logger.debug("Copying new image to remotehost");
	    	for (ImageFile imgF : nDomain.imgFiles) {
		    	if (! giHostImg.scp_to(imgF.work_image , imgF.host_image).success){
		    		return setError("... failed to copy image " + imgF.work_image + " to " + imgF.host_image);
		    	}
	    	}
        }

	    String cmd = "sudo chmod -R 777 " + nDomain.host_domain_dir;		    
        if (giHostImg != null) {
        	ro = giHostImg.exec(cmd);	        	
        } else {
        	ro = exec(cmd);
        }
        if (giHostImg != null) {
        	giHostImg.disconnect();
        	giHostImg = null;
        	Logger.debug("Disconnecting from remote host: " + qemu_svr);
        }
                    
        if (ro.exit_code > 0) {
        	return setError("Error " + cmd + "  returned: " + ro.error);
        }

	    Logger.debug("Defining new domain" );
	    if (! vc.define(new_xml, new_domain)) {
	        Logger.debug("Error. Failed to define new domain - " + new_domain);
	    }
	        
	    if (start) {   
	        Logger.debug("Starting new domain");
	        if (! vc.start(new_domain)) {
	        	return setError("Error. Failed to start new domain - " + new_domain);
	        }
	    }		        
	    
	    if (connect) {
	        Logger.debug("Connecting to new domain - " + ip);
	    	int max_retries = 20;
	    	giGuest = new GeofInstaller( ip, user, pwd, max_retries );
	    	if (! giGuest.connect().success) {
	    		return setError("Error. Failed to connect to new domain - " + new_domain);
	    		return false;
	    	}
	        Logger.debug("... connected to new domain");
	    }
	        
	    if (install_file != null) {
	        Logger.debug("Installing files on new domain");
	        JSONArray cleanup = new JSONArray();    
	        if (! giGuest.run_install(install_file, cleanup).success) {
	        	return setError("Error. Failed to complete software install on new domain");
	        	return false;
	        }
	        Logger.debug("... files installed");
	    }
	    
	    Logger.debug("--- Dopple complete ---" );
	    return true;
    } catch (Exception e) {
    	return setError("--- Dopple Failed ---" + e.getMessage() );
    	return false;
    } finally {
		if ( vc != null) {
			vc.close();
		}
		if ( giHostImg !=  null) {
			giHostImg.disconnect();
		}
		if ( giGuest != null) {
			giGuest.disconnect();
		}

    }
}
    

	//--------------------------
	public boolean delete() {
		GeofInstaller giHost = null;
	//	String domain_name, String host, String user, String pwd, String host_img_dir
		
		try {
	
			boolean is_remote_host = false;
	//	    boolean is_remote_host = host != null;
	//	    if (is_remote_host) {
	//	        if (user == null) {
	//	        	return return setError("Missing -user parameter");
	//	        }
	//	        if (pwd == null) {
	//	        	return return setError("Missing -pwd parameter");
	//	        }	
	//	    	libvirt_conn = "qemu+tls://" + host + "/system"; 
	//	    }		    
		    
		    // Connect to the Host server
		    VmManager vmgr = VmManager.get();
		    if (vmgr == null) {
		    	return false;
		    }
		    
	//	    boolean vc_connected = vmgr.open();
	//	    if ( ! vc_connected ){
	//	    	return return setError("Could not connect to host server");
	//	    }
	
		    String domain_name = _data.optString("domain_name");
		    // Get the 'from' domain information (image files, xml, etc)
	        if (domain_name == null) {
	        	return setError("Missing domain_name parameter");
	        }
	
		    //TODO: write return object for calls like this
		    Domain domain = vmgr.get_domain(domain_name);
		    DomainData dData = null;
		    String domaindir = null;
	
		    if (domain != null) {
			    // Shutdown the donor domain if necessary
			    if (vmgr.get_domain_state(domain_name) == RUNNING) {
			        Logger.debug("Shutting down FROM domain - " + domain_name);
			        if (!vmgr.shutdown(domain_name)) {
		                Logger.debug("Error: could not shutdown target domain -" + domain_name);
			        }
			    }
			    dData = vmgr.get_image_info(domain_name);
			    domaindir = dData.getDomainDirectory();
			    if (! vmgr.undefine(domain_name)) {
		            vmgr.close();
			    	return setError("Error - failed to remove domain - [" + domain_name + "]");
		        }
		        vmgr.close();
		    }
		    
		    String host_img_dir = _data.optString("host_img_dir");
		    if (domaindir == null) {
		    	if (host_img_dir == null) {
		    		return setError("Could not find domain and -host_img_dir parameter is null");
		    	}
		    	domaindir = host_img_dir + domain_name + "/";
		    }
		   
		    boolean rtn = false;
		    if (is_remote_host) {
	
	//	    	giHost = new GeofInstaller(host, user, pwd, 12);
	//            
	//            Logger.debug("Attempting to connect to domain host: " + host);
	//            rtn = giHost.connect().success ;
	//            if (! rtn ) {
	//            	return return setError("... connection attempt timed out");
	//            }
	//            Logger.debug("... connected to " + host);
	//            host != null
	//    		rtn = giHost.delete_directory(domaindir).success;
	    		
		    } else {
			    File dir = new File(domaindir);
			    if (dir.isDirectory()) {
			        Logger.debug("Removing existing directory - " + domaindir);
			        try {
						FileUtils.deleteDirectory(dir);
					} catch (IOException e) {
						return setError("Error - failed to remove domain directory - " + domaindir + e.getMessage());
					}
			        if (dir.exists()) {
			        	return setError("Error - failed to remove domain directory - " + domaindir);
			        }
			    }
			    rtn = true;
		    }
	
		    Logger.debug("Domain - [" + domain_name + "] removed");
		    return true;
	    } catch (Exception e) {
	    	return setError("--- Dopple Failed ---" + e.getMessage() );
	    }finally {
	//		if ( vc != null) {
	//			vmgr.close();
	//		}
	//		if ( giHost !=  null) {
	//			giHost.disconnect();
	//		}
	    }
	
	}
	
    
	public ReturnObj exec(String cmd) {
		try {
			Process p = Runtime.getRuntime().exec(cmd);
			int exit_code = p.waitFor();
	    	String stdout = getStream(p.getInputStream());
	    	String stderr = getStream(p.getErrorStream());
	        return new ReturnObj(exit_code == 0, stderr, stdout, exit_code);
		} catch (Exception e) {
			return ReturnObj.getError(e.getMessage());
		}
	}
	
	public static String getStream(InputStream is) {
		Scanner s = new Scanner(is);
		s.useDelimiter("\\A");
		String rtn = s.hasNext() ? s.next() : "";
		s.close();
		return rtn;
	}
	
}
