package org.geof.dpl.mgr;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.geof.dpl.DomainData;
import org.geof.log.Logger;
import org.libvirt.Connect;
import org.libvirt.Domain;
import org.libvirt.DomainInfo;
import org.libvirt.LibvirtException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

public class VmManager {

	public final static String BLOCKED = "VIR_DOMAIN_BLOCKED";
	public final static String CRASHED = "VIR_DOMAIN_CRASHED"; 
    public final static String NOSTATE = "VIR_DOMAIN_NOSTATE";
    public final static String PAUSED = "VIR_DOMAIN_PAUSED"; 
    public final static String RUNNING = "VIR_DOMAIN_RUNNING";
    public final static String SHUTDOWN = "VIR_DOMAIN_SHUTDOWN";
    public final static String SHUTOFF = "VIR_DOMAIN_SHUTOFF";
    
	public final static String DEFAULT_CONN = "qemu:///system";
	
	private static VmManager _instance = null;
//	private static boolean _stay_connected = true;
	
	private static String _conn_str = null;
	private Connect _conn;
	
	private String _error = null;
	
	private VmManager ( ) {	
        try {
			_conn = new Connect(_conn_str == null ? DEFAULT_CONN :_conn_str);
			_instance = this;
			
		} catch (LibvirtException e) {
			_error = e.getMessage();
			Logger.debug(e);
		}
	}
	
	public static VmManager get() {
		if (_instance == null) {
			_instance = new VmManager();
		} 
		return _instance;
	}
		
	/**
	 * 
	 * @return
	 */
	public int close() {
		if (_conn != null) {
			try {
				return _conn.close();
			} catch (LibvirtException e) {
				return -1;
			}
		}
		return 0;
	}

	
	/**
	 * 
	 * @param xmlpath
	 * @param name
	 * @return
	 */
	public boolean define(String xmlpath, String name) {
	    try {
	        _conn.domainDefineXML(xmlpath);
	        return (this.get(name) != null);
	    } catch(Exception e) {
	        return false;
	    }
	}
	
	/**
	 * 
	 * @param name
	 * @return
	 */
	public boolean undefine(String name) {
	    try {
	        Domain domain = this.get(name);
	        if (domain == null){
	            return true;
	        }
	        else {
	            if (domain.getInfo().state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING) {
	                if (! this.shutdown(name) ) {
	                    return false;
	                }
	            }
	                
	            domain.undefine();
	            domain = this.get(name);
	            if (domain == null) {
	                return true;
	            }
	        }
	    } catch(Exception e) {
	       Logger.debug( "Could not unpublic define domain "+ name + " due to: " +  e.getMessage());
	    }
        return false;
	}
	
	/**
	 * 
	 * @param name
	 * @return
	 */
	public boolean shutdown(String name) {
	    try {
	        Domain domain = this.get(name);
	        if (domain == null) {
	            return true;
	        }

	        if (domain.getInfo().state == DomainInfo.DomainState.VIR_DOMAIN_SHUTOFF) {
	            return true ;
	        }
	        
	        domain.destroy();
	        domain = this.get(name);
	        return (domain.getInfo().state == DomainInfo.DomainState.VIR_DOMAIN_SHUTOFF);
	            
	    } catch(Exception e) {
	       Logger.debug( e.getMessage());
	        return false;
	    }
	}
		
	/**
	 * 
	 * @param name
	 * @return
	 */
	public boolean start(String name) {
	    try {
	        Domain domain = this.get(name);         
	        domain.create();
	        return (domain.getInfo().state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING);
	    } catch(Exception e){
	        return false;
	    }
	}
	
	/**
	 * 
	 * @param name
	 * @return
	 * @throws LibvirtException
	 */
	public int getState(String name) throws LibvirtException {
	    Domain domain = this.get(name);
	    if (domain == null) {
	        return -1;
	    } else {
	        return domain.getInfo().state.ordinal();
	    }
	}
	
	/**
	 * 
	 * @param name
	 * @return
	 */
	public Domain get(String name) {
	    try { 
	        return _conn.domainLookupByName(name)  ;    
	    } catch(Exception e) {
	       return null;
	    }
	}
	    
	/**
	 * 
	 * @param name
	 * @return
	 */
	public DomainData getImageInfo(String name) {
		
		DomainData dd = new DomainData(name);
		try {			
			Domain domain = this.get(name);
			if (domain == null) {
			    return null;
			}
			String raw_xml = domain.getXMLDesc(0);
			dd.setXmlStr( raw_xml);
			XPath xpath = XPathFactory.newInstance().newXPath();
			InputSource iSrc = new InputSource(new StringReader(raw_xml));

			String exp = "//devices/disk/source";
			iSrc = new InputSource(new StringReader(raw_xml));
			NodeList nodes = (NodeList) xpath.evaluate(exp, iSrc, XPathConstants.NODESET);
			for (int indx=0;indx<nodes.getLength();indx++) {
				Node currentItem = nodes.item(indx);
				Node filename = currentItem.getAttributes().getNamedItem("file");
			    dd.addFile( filename.getNodeValue() );
			}
			
		} catch (Exception e) {
			try {
				dd.error = e.getMessage();
			} catch (Exception eo){}
		}
		return dd;
	}
			
	/**
	 * 
	 * @param filename
	 * @param contents
	 * @return
	 */
	public boolean writeNewXml(String filename, String contents) {
	    try {
	    	BufferedWriter out = new BufferedWriter(new FileWriter(filename));
		    out.write(contents);
	        out.close();
	        return true; 
	    } catch(Exception e) {
	        return false;
	    }
	}   
	           
	/**
	 * 
	 * @param directory
	 * @return
	 */
	public String makeTargetDir(String directory) {
		File file = new File(directory);
	    if (file.exists()) {
	        return "File exists";
	    } else {
	        file.mkdir();
	        return null;
	    }
	}
	
	/**
	 * 
	 * @return
	 */
	public String randomMAC() {
	    Random rand = new Random();
	    return "52:54:00:" 
	    	+ Integer.toHexString(rand.nextInt(0xFF))
	      	+ ":" + Integer.toHexString(rand.nextInt(0xFF))
	      	+ ":" + Integer.toHexString(rand.nextInt(0xFF)); 
	}	
	
	/**
	 * 
	 * @param state
	 * @return
	 * @throws Exception
	 */
	public Integer[] list_domains(String state) throws Exception {
		
		List<Integer> ids = new ArrayList<Integer>();
		for ( int id : _conn.listDomains()) {
			Domain domain = _conn.domainLookupByID(id);
			DomainInfo di = domain.getInfo();
			System.out.println(domain.getName() + " : " + di.state);
			if (state == null || di.state.toString().compareTo(state) == -1) {
				ids.add(id);
			}
		}
	    return ids.toArray(new Integer[ids.size()]) ;      
	}

	/**
	 * 
	 * @param id
	 * @return
	 * @throws LibvirtException
	 */
	public String getDomainName(int id) throws LibvirtException {
		Domain domain = _conn.domainLookupByID(id);
		return domain.getName();
	}

	/**
	 * 
	 * @return
	 */
	public boolean hasError () {
		return _error != null;
	}
	
	/**
	 * 
	 * @return
	 */
	public String getError() {
		String rtn = "";
		if (_error != null) {
			rtn = _error;
			_error = null;
		}
		return rtn;
				
	}
}
